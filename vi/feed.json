{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "NNBlog",
  "language": "vi",
  "home_page_url": "https://nnb.codeberg.page/blog",
  "feed_url": "https://nnb.codeberg.page/blog/vi/feed.xml",
  "description": "Blog that SuperB",
  "author": {
    "name": "NNB",
    "url": "https://nnb.codeberg.page"
  },
  "items": [
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/15/",
      "url": "https://nnb.codeberg.page/blog/en/posts/15/",
      "title": "CLI, TUI và GUI",
      "content_html": "<h2 id=\"definitions\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/15/#definitions\" aria-hidden=\"true\">#</a> Definitions</h2>\n<h3 id=\"gui\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/15/#gui\" aria-hidden=\"true\">#</a> GUI</h3>\n<p><strong>GUI</strong> or <strong>G</strong>raphical <strong>U</strong>ser <strong>I</strong>nterface is user interface type that allows users to interact through visual and graphic such as images, buttons, tabs, scroll bars... It's everywhere, it is like the default type of interface, the definition of user interface is self. All websites, smartphone interfaces, and the default file manager on your computer are all using GUI.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Graphical_user_interface\">(Read more on Wikipedia)</a></p>\n<h3 id=\"tui\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/15/#tui\" aria-hidden=\"true\">#</a> TUI</h3>\n<p><strong>TUI</strong> or <strong>T</strong>ext-based <strong>U</strong>ser <strong>I</strong>nterface is like GUI but instead of having visual and graphic, everything is displayed in text. Characters can be bold, italic, underlined, uppercase, lowercase, blinking, with any foreground or/and background color... But the text must always be mono characters (on grid). We will mainly see this type of interface on software run on terminal such as text editor, media player, task manager...</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Text-based_user_interface\">(Read more on Wikipedia)</a></p>\n<h3 id=\"cli\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/15/#cli\" aria-hidden=\"true\">#</a> CLI</h3>\n<p><strong>CLI</strong> or <strong>C</strong>ommand <strong>L</strong>ine <strong>I</strong>nterface is an interface where the only way to interact is to write commands through a prompt and send it, the software will then return a results, and the user is allowed to type and send commands again.</p>\n<p>Software that <strong>uses</strong> CLI typically includes shells such as Bash, Zsh, Nushell... Some REPL (read-eval-print loop) for programing languages like Python, Ruby, ... And other tools like <a href=\"https://wiki.archlinux.org/title/NetworkManager#Usage\"><code>nmcli</code></a>, <a href=\"https://www.mankier.com/1/bc\"><code>bc</code></a>, <a href=\"https://github.com/printfn/fend\"><code>fend</code></a>, <a href=\"https://github.com/leo-arch/clifm\"><code>clifm</code></a>... But note that software that uses the CLI interface to display content inside it is <strong>not</strong> CLI software, but it is TUI.</p>\n<p>CLI software is software run as command inside a shell, for example <a href=\"https://www.mankier.com/1/ls\"><code>ls</code></a>, <a href=\"https://www.mankier.com/1/cp\"><code>cp</code></a>, <a href=\"https://www.mankier.com/1/mv\"><code>mv</code></a>, <a href=\"https://www.mankier.com/1/rm\"><code>rm</code></a>, <a href=\"https://www.mankier.com/1/cal\"><code>cal</code></a>, <a href=\"https://github.com/dylanaraps/neofetch\"><code>neofetch</code></a>, ... The general pattern of CLI softwares are like:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">command</span> parameter <span class=\"token parameter variable\">--flag</span></code></pre>\n<p><a href=\"https://en.wikipedia.org/wiki/Command-line_interface\">(Read more on Wikipedia)</a></p>\n<h2 id=\"cli-gui-and-tui\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/15/#cli-gui-and-tui\" aria-hidden=\"true\">#</a> CLI &gt; GUI (and TUI)</h2>\n<ul>\n<li>CLI seems difficult to use and learn at first. But once you get used to it, you can operate in shell really fast and flexible. Using CLI is like programming a simple software and runs it at the same time.</li>\n<li>Most CLI tool launch and process in a blink, reduce friction in your workflow.</li>\n<li>There is a giant library of cool and useful CLI tools that allow you to do things that few GUI/TUI software can do. Many tools give you the freedom to do all kinds of things with your computer. You can fix, change or break the entire operating system if you want.</li>\n<li>Using CLI is powerful in that we can connect separate software to work together by taking <code>stdout</code> (standard output) of a software and used it as <code>stdin</code> (standard input) for another software. We call this pipe/piping. Two or more software connected together in this way is called a pipeline.</li>\n</ul>\n<p>Here is an example of a pipeline (the <a href=\"https://www.mankier.com/1/echo\"><code>echo</code></a> command prints a string. <a href=\"https://www.mankier.com/1/rev\"><code>rev</code></a> reverses the input data. <a href=\"https://www.figlet.org/\"><code>figlet</code></a> turns strings into large ASCII letters. <a href=\"https://www.mankier.com/1/tee\"><code>tee</code></a> read from standard input and write to standard output and files, which a &quot;files&quot; can be a terminal output. Finally, the command <a href=\"https://getclipboard.app/\"><code>cb</code></a> copy input data to the clipboard):</p>\n<pre><code>$ echo '!dlroW ,olleH' | rev | figlet | tee /dev/tty | cb\n _   _      _ _         __        __         _     _ _\n| | | | ___| | | ___    \\ \\      / /__  _ __| | __| | |\n| |_| |/ _ \\ | |/ _ \\    \\ \\ /\\ / / _ \\| '__| |/ _` | |\n|  _  |  __/ | | (_) |    \\ V  V / (_) | |  | | (_| |_|\n|_| |_|\\___|_|_|\\___( )    \\_/\\_/ \\___/|_|  |_|\\__,_(_)\n                    |/\n[✔] Copied 336B\n</code></pre>\n",
      "date_published": "2023-12-30T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/14/",
      "url": "https://nnb.codeberg.page/blog/en/posts/14/",
      "title": "Cú đổi $EDITOR hiếm",
      "content_html": "<p>I never actually use 4chan before, but I found the greentext format to be quite interesting for story telling. So this time I will try writing a blog in this style, hope you enjoy!</p>\n<h2 id=\"emacs\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/14/#emacs\" aria-hidden=\"true\">#</a> <a href=\"https://www.gnu.org/software/emacs\">Emacs</a></h2>\n  <p class=\"text-success\">\n    &gt; be me<br />\n    &gt; just switch from windows 10 to kde neon<br />\n    &gt; fall in love with it customizability<br />\n    &gt; discover <a class=\"text-success\" href=\"http://xahlee.info/emacs/emacs/emacs.html\">xah blog about emacs</a><br />\n    &gt; also pp say that its the most customizable text editor<br />\n    &gt; fitting with the linux spirit that i desire<br />\n    &gt; install it<br />\n  </p>\n  <p class=\"text-success\">\n    &gt; emacs also come with a shitty tui and a clutter gui<br />\n    &gt; i minimize and customize the gui<br />\n    &gt; emacs is now as good as the default text editor that come with the de<br />\n    &gt; try out <a class=\"text-success\" href=\"https://www.spacemacs.org/\">spacemacs</a><br />\n    &gt; dont like it<br />\n    &gt; its slow and way more bloat<br />\n    &gt; decide to rice emacs from scratch<br />\n    &gt; drown myself in the <a class=\"text-success\" href=\"https://github.com/emacs-tw/awesome-emacs\">awesome emacs list</a><br />\n    &gt; install a LOT of packages to emacs<br />\n    &gt; spent months configuring emacs<br />\n    &gt; loving it<br />\n  </p>\n  <p class=\"text-success\">\n    &gt; emacs have a ton of features<br />\n    &gt; too much features<br />\n    &gt; humongously bloat!<br />\n    &gt; not just ide level of bloat<br />\n    &gt; but os level of bloat<br />\n    &gt; even have a builtin file manager<br />\n    &gt; and tetris<br />\n  </p>\n  <p class=\"text-success\">\n    &gt; slowly feel overwhelmed and exhausted in the emacs config rabbit hole<br />\n    &gt; still feel somewhat dissatisfied with the config...<br />\n  </p>\n<p>Learning about Emacs from XahLee's blogs, I discover <a href=\"http://xahlee.info/kbd/keyboarding.html\">Xah Keyboard Guide</a>, then of course learn about <a href=\"http://xahlee.info/emacs/emacs/ergonomic_emacs_keybinding.html\">XahLee's ErgoEmacs Keybinding</a> and <a href=\"https://ergoemacs.github.io/\">Ergoemacs-mode</a>, it's try to bind frequently used actions to easy to reach shortcut and use the commonly bound keys familiar to industry standard (e.g: <kbd class=\"kbd kbd-sm\">Ctrl</kbd> + <kbd class=\"kbd kbd-sm\">z</kbd> to undo, <kbd class=\"kbd kbd-sm\">Ctrl</kbd> + <kbd class=\"kbd kbd-sm\">s</kbd> to save). But it's heavy and breaks regularly, some of the binds I feel like missing or can be improved. So I decided to create <a href=\"https://github.com/NNBnh/.emacs.d/blob/main/key.el\">my own bindings</a>, unknowingly kickstart a length journey...</p>\n<p>Because I want a better Emacs keybinds instead of except it's legacy design, I couldn't stand the default keybinds and spent way too much time and energy to learn as much about Lips and Emacs's actions to config... That is the reason why I feel exhausted and dissatisfied with Emacs. And also at the time, I didn't know about <a href=\"https://github.com/doomemacs/doomemacs\">Doom Emacs</a>, an Emacs framework that doesn't bloat.</p>\n<h2 id=\"neovim\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/14/#neovim\" aria-hidden=\"true\">#</a> <a href=\"https://neovim.io/\">NeoVim</a></h2>\n  <p class=\"text-success\">\n    &gt; watching some linux stuff on yt<br />\n    &gt; saw some cool hackerman-looking text editor<br />\n    &gt; its vim<br />\n    &gt; pp love vim<br />\n    &gt; specifically neovim<br />\n    &gt; try it out<br />\n    &gt; its very fast and light<br />\n    &gt; feel like a hackerman<br />\n    &gt; config nvim<br />\n    &gt; just week later<br />\n    &gt; i was able to config nvim to become a more ideal editor for me than emacs<br />\n  </p>\n<p>Emacs keybinds are weird, but Vi binds are otherworldly strange! Many keys feel redundant, some frequently used actions are place in awkward places...</p>\n<p>Vim introduce me to modal text editing. Simply put, it divides writing, editing and selecting and so on into separate modes, and so the user just need to press buttons to perform actions instead of holding down multiple keys combination. it took a few days to get used to, after that, ... [<strong>Enlightenment~</strong>], editing feel like dancing my fingers on the keyboard!</p>\n<p>Vi binds ecosystem is huge with a lot of popular tools implementing it in one way or the other, one that learn Vi keys will benefit a lot by it's ecosystem. I of course ignoring it and continue my own keybinds saga.</p>\n<p>This time I decide to turn the keybinds from my custom config into a big project, I create <a href=\"https://github.com/NNBnh/bkey-old\">Bkey</a> its a universal keybinds system design for almost all applications. By define each key on the keyboard with a meaning, the applications can bind their own set of shortcuts/actions to fit those meanings. And come with it: <a href=\"https://github.com/NNBnh/bkey-vim\">Bkey-Vim</a> a Bkey implement for Vim.</p>\n<h2 id=\"kakoune\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/14/#kakoune\" aria-hidden=\"true\">#</a> <a href=\"https://kakoune.org/\">Kakoune</a></h2>\n  <p class=\"text-success\">\n    &gt; saw <a class=\"text-success\" href=\"https://youtu.be/sbfCSHhopT4\">a video about kakoune by dt</a><br />\n    &gt; skeptical at first<br />\n    &gt; then realize its genius design<br />\n    &gt; switch editor for the third time<br />\n    &gt; kakoune is extremely minimalistic<br />\n    &gt; and have better default<br />\n    &gt; plus easier to config than previous editor<br />\n    &gt; its build from the ground up with <a class=\"text-success\" href=\"https://kakoune.org/why-kakoune/why-kakoune.html\">its philosophy</a><br />\n    &gt; e.g: object followed by verb (like how thing should be)<br />\n    &gt; multiple selections is the best things ever introduced to text editors<br />\n    &gt; its easy to understand, fast, convenient, orthogonal, flexible and powerful<br />\n    &gt; boy i can never go back to those non multi selections editor every again<br />\n  </p>\n<p>When switching to Kakoune, I decide to overhaul the Bkey project, rebrand it to <a href=\"https://github.com/NNBnh/bmap\">Bmap</a> and create <a href=\"https://github.com/NNBnh/bmap.kak\">Bmap.kak</a> a Bmap implement for Kakoune.</p>\n<h2 id=\"other-tui-editors\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/14/#other-tui-editors\" aria-hidden=\"true\">#</a> Other TUI editors</h2>\n  <p class=\"text-success\">\n    &gt; i also try out other tui editors later on:<br />\n  </p>\n<h3 id=\"helix\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/14/#helix\" aria-hidden=\"true\">#</a> <a href=\"https://helix-editor.com/\">Helix</a></h3>\n  <p class=\"text-success\">\n    &gt; helix is like kakoune with builtin lsp and tree sitter<br />\n    &gt; written in rust<br />\n    &gt; blazingly fast<br />\n  </p>\n<p>I also wrote a lengthy features requests and changes to <a href=\"https://github.com/helix-editor/helix/issues/1179\">an issues on Helix's Github</a>, of course it got rejected.</p>\n<p>I try to make <a href=\"https://github.com/NNBnh/bmap-helix\">Bmap-Helix</a> (unfinished).</p>\n<h3 id=\"pepper\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/14/#pepper\" aria-hidden=\"true\">#</a> <a href=\"https://vamolessa.itch.io/pepper\">Pepper</a></h3>\n  <p class=\"text-success\">\n    &gt; probably the best designed tui text editor that i know of<br />\n    &gt; its building up upon Kakoune philosophy<br />\n    &gt; but use caret style cursors<br />\n    &gt; (cursor is not a block in a characters but a thin line between two characters)<br />\n    &gt; like cursors on any other gui apps<br />\n    &gt; its keybinds actions are elegantly and convenient<br />\n    &gt; pepper is bloat free<br />\n    &gt; its doesnt having any feature that could instead be implemented by integrating an external tool<br />\n    &gt; its more minimal than nvim and helix<br />\n    &gt; but still have enough features (like lsp support) out of the box unlike kakoune<br />\n    &gt; the downside its although pepper is open source<br />\n    &gt; its not free<br />\n    &gt; at the time i try it still very buggy and unpolish<br />\n  </p>\n<p>And of course I ertend to make <a href=\"https://github.com/NNBnh/bmap-pepper\">Bmap-Pepper</a> (unfinished).</p>\n<h2 id=\"the-tiny-problem-with-tui-editor\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/14/#the-tiny-problem-with-tui-editor\" aria-hidden=\"true\">#</a> The tiny problem with TUI editor</h2>\n<p>Normally when I'm moving around the file system in the shell, if I want to edit some files, I want to open the editor in a new window and leave the shell in the back, so latter I can do other things on the same path rather than replacing the current shell with the editor. I could write a script/alias/function to do that, but isn't a GUI editor like VScode already opened files in a new window by default?</p>\n<h2 id=\"vscode\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/14/#vscode\" aria-hidden=\"true\">#</a> <a href=\"https://code.visualstudio.com/\">VScode</a></h2>\n  <p class=\"text-success\">\n    &gt; thinking about switching back to gui editor<br />\n    &gt; then a desperate thought appear<br />\n    &gt; maybe vscode<br />\n    &gt; the normie editor<br />\n    &gt; is the answer<br />\n    &gt; ...<br />\n    &gt; i have take a look at vscode in the past<br />\n    &gt; saw it have made a lot of right design decisions<br />\n    &gt; and used it as a standard to improve my other editor config<br />\n    &gt; maybe i should give it try<br />\n    &gt; ...<br />\n    &gt; install vscode<br />\n    &gt; probably the editor that come with the best default setting<br />\n    &gt; its not slow or heavy as pp said<br />\n  </p>\n  <p class=\"text-success\">\n    &gt; its keybinds is industry standard<br />\n    &gt; multi selections in vscode is not as good as powerful as kakoune but still extremely good<br />\n    &gt; switching back to non modal editing feel a bit slow<br />\n    &gt; but for me its not a drop in productivity at all<br />\n    &gt; i still have my skill navigate with my trusty arrow keys<br />\n  </p>\n  <p class=\"text-success\">\n    &gt; its have the best lps support<br />\n    &gt; and ton of other features<br />\n    &gt; yet none of it feel bloat<br />\n    &gt; vscode plugins ecosystem is the biggest<br />\n    &gt; easy to learn and config<br />\n    &gt; start spending more time to code than tweaking the editor<br />\n    &gt; seem like its the most popular editor for reasons<br />\n  </p>\n  <p class=\"text-success\">\n    &gt; while everyone share about how they switch from vscode to neovim and emacs<br />\n    &gt; i do this:<br />\n    &gt; emacs -&gt; neovim -&gt; kakoune -&gt; helix -&gt; pepper -&gt; vscode<br />\n    &gt; now that is a rare <code class=\"text-success\">$EDITOR</code> hopping<br />\n  </p>\n",
      "date_published": "2023-12-25T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/13/",
      "url": "https://nnb.codeberg.page/blog/en/posts/13/",
      "title": "Distro lý tưởng",
      "content_html": "<h2 id=\"why-linux-in-the-first-place\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/13/#why-linux-in-the-first-place\" aria-hidden=\"true\">#</a> Why Linux in the first place?</h2>\n<p>I choose Linux over Windows and MacOS because:</p>\n<ul>\n<li>It is fast, lightweight.</li>\n<li>It is <a href=\"https://wikipedia.org/wiki/Free_and_open-source_software\">FOSS</a>.</li>\n<li><a href=\"https://www.privacytools.io/os\">It's the most privacy desktop OS</a>.</li>\n<li>And most importantly it's customizability is endless.</li>\n</ul>\n<h2 id=\"base-distro\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/13/#base-distro\" aria-hidden=\"true\">#</a> Base Distro</h2>\n<p>My dotfiles is quite flexible, it can be easily adapted to almost any distro. But I still have preferences (in order): Arch-based &gt; Ubuntu-based &gt; Fedora-based &gt; other.</p>\n<p><a href=\"https://fedoraproject.org/\">Fedora</a> seems to be more stable and up-to-date than <a href=\"https://ubuntu.com/\">Ubuntu</a>, but it doesn't have packages that aren't strictly open source, a few can still be installed but it's annoying.</p>\n<p><a href=\"https://archlinux.org/\">Arch</a> has the most packages <em>if</em> including the AUR, which can sometimes be quite janky. Arch has a reputation for being easier to break than other distros, but I find all distros to break equally easy...</p>\n<p><a href=\"https://nixos.org/\">NixOS</a> is very competitive to Arch in terms of package quantity and quality. But I find Nix to be is quite janky after ricing it!</p>\n<h2 id=\"desktop-environment\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/13/#desktop-environment\" aria-hidden=\"true\">#</a> Desktop Environment</h2>\n<p>After using window manager for a while, I decided to go back to DE (detailed explanation <a href=\"https://nnb.codeberg.page/blog/en/posts/12/#5-maximalist\">here</a>) because I wanted to find an easy and stable experience that &quot;it just works&quot;.</p>\n<p>Some DEs like <a href=\"https://www.lxde.org/\">LXDE</a> and <a href=\"https://xfce.org/\">XFCE</a> are very light, too light in fact, it is not suitable for me because it is not as customizable as I want.</p>\n<p>DEs like <a href=\"https://elementary.io/\">Pantheon</a> and <a href=\"https://www.deepin.org/en/dde\">Deepin</a> have a pretty good out-of-the-box experience, but it's quite limited when it come to customization. I recommend this DE if you love it at first sight and have no need for customization.</p>\n<p><a href=\"https://www.kde.org/plasma-desktop\">KDE Plasma</a> is easy to customize out-of-the-box, from the simplest things to the most advanced. Plasma is easy to configure, suitable for Linux newbies who want to rice. KDE apps are also feature-rich (e.g: <a href=\"https://apps.kde.org/dolphin\">Dolphin</a>) but its interface is a bit cramped.</p>\n<p><a href=\"https://nnb.codeberg.page/blog/en/posts/13/www.gnome.org\">Gnome</a> design is very harmonious, consisted, minimalistic and elegant. Switching from Windows or other DE to Gnome initially feeling strange, but after a while you will understand the beauty of the design and a great workflow that Gnome brings to you. GNOME is actually no less than KDE but actually better when it comes to customization: Although GNOME is not officially supported, you can install <a href=\"https://extensions.gnome.org/\">extensions</a>. Gnome extensions are very diverse and extensive, it integrates well into DE. Gnome has extensions like <a href=\"https://extensions.gnome.org/extension/1287/unite\">Unite</a> while KDE can hardly config to do the same as convenience as Gnome.</p>\n<h2 id=\"other-requirements\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/13/#other-requirements\" aria-hidden=\"true\">#</a> Other requirements</h2>\n<ul>\n<li>Bloat-free: Do not preinstall software like games, maps, image/video editors or even web browsers. Don't put a bunch of software that some people might or might not like, let the users choose the software they want themselves. The bloatware may be pre-installed in the live-image but leave it as an unchecked option during the installation process.</li>\n<li>DE mustn't have any theming/branding presented, just the pure default theme DE.</li>\n<li>The distro should preinstalled:\n<ul>\n<li><a href=\"https://www.flatpak.org/\">Flatpak</a>.</li>\n<li><a href=\"https://wikipedia.org/wiki/CJK_characters\">A CJK font</a>.</li>\n<li>All type of video codex and firmware.</li>\n<li>Archive format like <a href=\"https://7-zip.org/\">7-Zip</a>, <a href=\"https://www.rarlab.com/\">Rar</a>.</li>\n<li>CLI tools: <a href=\"https://git-scm.com/\">Git</a>, <a href=\"https://ffmpeg.org/\">FFmpeg</a>, <a href=\"https://curl.se/\">Curl</a> and <a href=\"https://github.com/bugaevc/wl-clipboard\">WL-clipboard</a>.</li>\n<li>Vietnamese input method like <a href=\"https://www.unikey.org/en\">Unikey</a> or better.</li>\n<li>Tools to tweaks the DE:\n<ul>\n<li>If it's Gnome then it should have <a href=\"https://gitlab.gnome.org/GNOME/gnome-tweaks\">Gnome Tweaks</a>, <a href=\"https://github.com/mjakeman/extension-manager\">Extension Manager</a>.</li>\n<li>If KDE then it's <a href=\"https://store.kde.org/p/1005410\">Kvantum</a>.</li>\n</ul>\n</li>\n<li>A Good <a href=\"https://www.winehq.org/\">Wine</a> preset.</li>\n</ul>\n</li>\n<li>Distro shouldn't have <a href=\"https://askubuntu.com/questions/93109/cant-write-to-ntfs-formatted-drives\">partition problem when dual-booting Windows</a>.</li>\n</ul>\n<h2 id=\"my-ideal-distro\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/13/#my-ideal-distro\" aria-hidden=\"true\">#</a> My ideal distro</h2>\n<p>And finally my pick is: <a href=\"https://nobaraproject.org/\">Nobara</a>!</p>\n<p>Nobara is a gaming-focused distro, it doesn't check all the list and it's a bit janky at times. But it has the best out-of-the-box experience of all the distros I've ever used.</p>\n<h3 id=\"honorable-mention\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/13/#honorable-mention\" aria-hidden=\"true\">#</a> Honorable Mention</h3>\n<p><a href=\"https://vanillaos.org/\">Vanilla OS</a> is a distro that allows users to install applications from any Linux distro from Arch, Fedora to NixOS. It checks a lot on the list but when I tried it earlier this year, it didn't seem to be ready yet... Vanilla was very janky, it freezes when I wake it up after suspend...</p>\n<p><a href=\"https://blendos.co/\">Blend OS</a> is similar to vanilla but It's Arch-based and I hope it will become my favorite choice when I try it out in the near future.</p>\n",
      "date_published": "2023-08-12T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/12/",
      "url": "https://nnb.codeberg.page/blog/en/posts/12/",
      "title": "Năm giai đoạn rice tối giản",
      "content_html": "<p><a href=\"https://www.reddit.com/r/unixporn/comments/s0cccz/berry_ayudark_my_super_rice\"><img src=\"https://i.imgur.com/7DWRz1Z.webp\" alt=\"Berry Rice\" /></a></p>\n<p>While writing <a href=\"https://nnb.codeberg.page/blog/en/posts/9/\">Image viewer/media player for minimalist</a> about the five stages of rice image viewer, I realized that those five stages are not just about rice image viewer, it's about minimalism rice as a whole. So I wrote this blog post to dive into the five stages of minimalist rice.</p>\n<h2 id=\"1-normie\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/12/#1-normie\" aria-hidden=\"true\">#</a> 1. Normie</h2>\n<p><a href=\"https://i.imgur.com/NTHZScu.webp\"><img src=\"https://i.imgur.com/NTHZScu.webp\" alt=\"KDE Rice\" /></a></p>\n<p>These newbies have just installed Linux, specifically Ubuntu or Ubuntu-based with a popular DE like Gnome or KDE. They installed some extensions, themes, icons and felt quite satisfied with their setup, thinking that they would never thinker with the OS ever again.</p>\n<h2 id=\"2-beginner\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/12/#2-beginner\" aria-hidden=\"true\">#</a> 2. Beginner</h2>\n<p><a href=\"https://codeberg.org/NNB/dotfiles/releases/tag/v1.0.0\"><img src=\"https://user-images.githubusercontent.com/43980777/104730274-50495600-576c-11eb-9520-890cb45815d9.png\" alt=\"BSPWM Rice\" /></a></p>\n<p>After installing Linux and everything, that newbie must also watch a lot of Linux videos on Youtube, so his feed shows quite a lot of Linux Youtubers, he clicked on it and suddenly heard the three words &quot;I use Arch&quot; (four if you count &quot;BTW&quot;). They back up everything and distro-hop to Arch or an Arch-based distro. It wasn't long before they also discovered <a href=\"https://www.reddit.com/r/unixporn\">r/unixporn</a>, their eyes light up, they quickly install <a href=\"https://github.com/baskerville/bspwm\">BSPWM</a> + <a href=\"https://polybar.github.io/\">Polybar</a> or <a href=\"https://hyprland.org/\">Hyprland</a> + <a href=\"https://github.com/Alexays/Waybar\">Waybar</a> and spend 2-3 weeks to rice it.</p>\n<p>Using tiling WM is dedicated to following the keyboard workflow, but the keyboard workflow on Linux can't be perfect without the terminal.</p>\n<blockquote>\n<p><span class=\"font-mono\">GUI != Cool<br />\nTTY == Hackerman</span></p>\n</blockquote>\n<p>They started learning how to use the shell, replacing most GUI apps with TUI/CLI apps and replacing the main shell with anything but Bash. They rice their prompt with <a href=\"https://starship.rs/\">Starship</a>, installs <a href=\"https://github.com/sts10/rust-command-line-utilities#unix-to-rust-replacements-or-near-replacements\">Exa and other Rust-replacements CLI tool</a>. Wouldn't be surprised if they've spent months learning and configuring <a href=\"https://neovim.io/\">NeoVim</a> at this point.</p>\n<h2 id=\"3-minimalist\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/12/#3-minimalist\" aria-hidden=\"true\">#</a> 3. Minimalist</h2>\n<p><a href=\"https://discord.com/channels/635612648934735892/1033210791320625243/1033339746463789096\"><img src=\"https://i.imgur.com/Sb9iZcz.webp\" alt=\"Cool Discord Rice\" /></a>\n<a href=\"https://codeberg.org/NNB/dotfiles/releases/tag/v3.3.0\"><img src=\"https://user-images.githubusercontent.com/43980777/172338839-482602d7-d57b-4152-a368-2333cf4c0d79.png\" alt=\"HerbstLuftWM Rice\" /></a></p>\n<h3 id=\"tiling-wm-is-bloat\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/12/#tiling-wm-is-bloat\" aria-hidden=\"true\">#</a> Tiling WM is bloat</h3>\n<p>I used to use an advanced tiling WM but after I read <a href=\"http://xahlee.info/linux/why_tiling_window_manager_sucks.html\">this post</a>. When I first reading the post, I hate it, I think it is stupid, he just using the wrong way... But then I realize that my workflow rarely need tiling windows in a complex way to begin with:</p>\n<ul>\n<li>When I'm using GUI app with mouse, I always maximize the apps.</li>\n<li>When using the terminal or text editor, I just want to look at the focus window and see no value of looking at 3-4 terminal at the same time.</li>\n<li>Tiling 3-4 windows on the screen make everything cramped, the only advantage of this is to easily interact things between windows with a mouse which contradict with the keyboard workflow.</li>\n</ul>\n<p>Time to move to floating WM. The thing is that minimalist WMs like <a href=\"https://github.com/dylanaraps/sowm\">SOWM</a> and <a href=\"https://berrywm.org/\">Berry</a> are pretty janky (at least at the time of writing this) so go back to tiling WM we do, we just need to set the rule to make windows automatically float.</p>\n<h3 id=\"bar-is-also-bloat\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/12/#bar-is-also-bloat\" aria-hidden=\"true\">#</a> Bar is also bloat</h3>\n<blockquote>\n<p><em>*Sniff sniff*</em> I smell bloat, and that smell comes from the bar. Switch to a lighter bar like <a href=\"https://github.com/LemonBoy/bar\">Lemonbar</a> or even <a href=\"https://sw.kovidgoyal.net/kitty/kittens/panel/#command-line-interface\">turn the terminal into bar</a> is unlikely to get rid of the stinky bloat smell.</p>\n<p>The problem is that it takes up precious space on my screen, a 16 to 24 pixel-wide space that stretches from one end to the other of the screen is <strong>wasted</strong> to display: the clock, workspaces, and some crappy information that I really don't need to check constantly. Unacceptable, throw the bar away!</p>\n<p>You can show the list of workspaces and the clock only when switching workspaces or using keyboard shortcuts to <a href=\"https://gist.github.com/NNBnh/5f6e601a6a82a6ed43b1959698758141?permalink_comment_id=3735888#gistcomment-3735888\">display it through a notification</a>.</p>\n<p>Or go the hardcore route and ditch it altogether, check the time on your watch, wall clock, or use the <code>date</code> command XD. Workspaces are really not necessary when I always maximize windows and rarely tile them anyway. Just use a workspace-less desktop, no need to config, no need to display.</p>\n</blockquote>\n<h2 id=\"4-extreme-minimalist\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/12/#4-extreme-minimalist\" aria-hidden=\"true\">#</a> 4. Extreme Minimalist</h2>\n<p><a href=\"https://codeberg.org/NNB/dotfiles/releases/tag/v3.5.0\"><img src=\"https://user-images.githubusercontent.com/43980777/218121026-2d2ddb94-5105-4df8-a6a9-8ab632b69ce3.png\" alt=\"TTY rice w/ Zellij\" /></a></p>\n<p>WM... is Bloat. We can also get rid of WM and login manager altogether. Use full TTY from Linux Kernel and type the command to open GUI app... <a href=\"https://github.com/K4zoku/nowm\">NOWM</a> or <a href=\"https://git.disroot.org/root_informatica/wms\">[wms]</a> will make the experience less miserable without WM.</p>\n<p>Remember those TUI/CLI apps we installed at the beginner stage? We realize we don't need 80% of it, we would rather use the tools available in the POSIX standard to make the script more portable. Then we even removed the file manager!</p>\n<p>The shell prompt is now just &quot;<code>$</code>&quot;, <code>pwd</code> is the only torch that lights us the way in the file system.</p>\n<p>The rice is no longer minimalist, it has become a black hole. Few are brave enough to go beyond, but some legends continue, The few features that identifies them is that they do <a href=\"https://www.linuxfromscratch.org/lfs\">Linux From Scratch</a> and know what <a href=\"https://wikipedia.org/wiki/Linux_framebuffer\">Linux framebuffer</a> is.</p>\n<h2 id=\"5-maximalist\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/12/#5-maximalist\" aria-hidden=\"true\">#</a> 5. Maximalist</h2>\n<p><a href=\"https://github.com/Aylur/dotfiles/tree/gnome43\"><img src=\"https://raw.githubusercontent.com/Aylur/dotfiles/gnome43/assets/rose.png\" alt=\"Gnome Rice\" /></a></p>\n<p>After a tiresome period of extreme minimalist rice, they have a different view of minimalism. They realize that using DE is very minimal in terms of time and effort. To be honest, DE is not that bloat, It has some features that although we don't always use, but having it is still very convenient in some situation. &quot;And if I don't install or configure anything but just use the default stuff from the DE, the dotfiles will be a lot more minimal!&quot;</p>\n<p>And so they decided to go back to installing DE. But this time, with more experience and skill, their rice is better than ever. They even installed more fancy features, more personality, going against the previous minimalism... Finally they felt quite satisfied with their setup, thinking that they would never thinker with the OS ever again...</p>\n<hr />\n<p>Credit to <a href=\"https://github.com/K4zoku\">Kazoku</a> for the Rice images!</p>\n",
      "date_published": "2023-08-10T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/11/",
      "url": "https://nnb.codeberg.page/blog/en/posts/11/",
      "title": "Nhãn của sổ",
      "content_html": "<p>Window's title is the most underrated aspect of a desktop when in fact it's very useful:</p>\n<ul>\n<li>It show information about the running programs in a standard way.</li>\n<li>It displays the titles of multiple windows which help us identify similar open applications (like when you open a bunch of text file and they're all look similar).</li>\n<li>It's easier for mouse user to interact with the window itself (not the application inside).</li>\n</ul>\n<p>But what is the best way to display window's title, let's take a look at some method.</p>\n<h2 id=\"key-terms\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#key-terms\" aria-hidden=\"true\">#</a> Key terms</h2>\n<ul>\n<li>Busy workspace: Workspace that have split layout container as it's first child.</li>\n<li>Tabs workspace: Workspace that have tabs layout container as it's first child. Because I turn <code>smart_gaps on</code> so a tabs workspace will not have gaps.</li>\n<li>The bar: (Usually called taskbar) will be refer as information bar.</li>\n</ul>\n<h2 id=\"legacy\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#legacy\" aria-hidden=\"true\">#</a> Legacy</h2>\n<p>This is the method that being used in Windows OS and most Linux's DE, it's display window's title both attach to the window itself and then show a list of windows on the information bar.</p>\n<table>\n<thead>\n<tr>\n<th>Busy workspace</th>\n<th>Tabs workspace</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809472-7ff54480-75db-11eb-8bef-8cd640e1072a.png\" alt=\"bothBusy\" /></td>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809474-808ddb00-75db-11eb-8dbb-35b9fa59878f.png\" alt=\"bothTab\" /></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pro\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#pro\" aria-hidden=\"true\">#</a> Pro</h3>\n<ul>\n<li>This is a legacy design that most people get used to.</li>\n</ul>\n<h3 id=\"con\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#con\" aria-hidden=\"true\">#</a> Con</h3>\n<ul>\n<li>The design is too old, it's look outdated:\n<ul>\n<li>Display windows title in two place is redundant.</li>\n<li>And make the desktop cramped.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"fix\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#fix\" aria-hidden=\"true\">#</a> Fix</h3>\n<ul>\n<li>Just used other method...</li>\n</ul>\n<h2 id=\"detach\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#detach\" aria-hidden=\"true\">#</a> Detach</h2>\n<p>Only show a list of windows on the information bar.</p>\n<table>\n<thead>\n<tr>\n<th>Busy workspace</th>\n<th>Tabs workspace</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809488-84b9f880-75db-11eb-8015-2729e907d094.png\" alt=\"taskBusy\" /></td>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809489-85528f00-75db-11eb-9974-0956ba00ec1b.png\" alt=\"taskTab\" /></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pro-1\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#pro-1\" aria-hidden=\"true\">#</a> Pro</h3>\n<ul>\n<li>This method give you the biggest screen real estate.</li>\n<li>And still shows you all the information: This is better than the <em>Attach method</em> in tabs workspace because it can even show additional information (workspaces and clock).</li>\n</ul>\n<h3 id=\"con-1\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#con-1\" aria-hidden=\"true\">#</a> Con</h3>\n<ul>\n<li>The problem is the way the information is presented, a list of title can show you how many windows and their name but not their location, so you end up confusing not knowing which title is correspond to which window... This defeat the whole purpose of display title for each window.</li>\n<li>You can't even tell if the container have tabs or not.</li>\n<li>It's hard for mouse user to interact with a window (drag and move window around).</li>\n<li>Those titles can take a lot of space in the information bar, space that can be used to display <code>CPU</code>, <code>MEM</code>, <code>DISK</code>, <code>TEMP</code>, <code>PLAYING</code>...</li>\n</ul>\n<h3 id=\"fix-1\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#fix-1\" aria-hidden=\"true\">#</a> Fix</h3>\n<ul>\n<li>&quot;you can't even tell if the container have tabs or not&quot;: You can make a container show title bar if it's has tabs but this is redundant to show title in two place.</li>\n</ul>\n<h2 id=\"attach\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#attach\" aria-hidden=\"true\">#</a> Attach</h2>\n<p>Show window's title attach to the window itself.</p>\n<table>\n<thead>\n<tr>\n<th>Busy workspace</th>\n<th>Tabs workspace</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809490-85eb2580-75db-11eb-8900-7c81a2f22a28.png\" alt=\"titleBusy\" /></td>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809492-8683bc00-75db-11eb-8fb7-8dbe4442787f.png\" alt=\"titleTab\" /></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pro-2\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#pro-2\" aria-hidden=\"true\">#</a> Pro</h3>\n<ul>\n<li>Everything is simple and clear, you know exactly which title is correspond to which window.</li>\n<li>It's easy for mouse user to interact with a window (drag and move window around).</li>\n<li>If you have an information bar, this method leave more space to the information bar than <em>Detach method</em>.</li>\n</ul>\n<h3 id=\"con-2\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#con-2\" aria-hidden=\"true\">#</a> Con</h3>\n<ul>\n<li>This method take a bit more screen real estate than <em>Detach method</em> in specific conditions e.g: In the busy workspace, you can see most window's title bar just sit on the top of the screen but <code>win4</code>'s title bar (on image) take more space in the middle of the screen unlike <em>Detach method</em>.</li>\n<li>If you have an information bar, this method will take as much screen real estate as <em>legacy method</em> although that space is used more efficiently.</li>\n</ul>\n<h3 id=\"fix-2\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#fix-2\" aria-hidden=\"true\">#</a> Fix</h3>\n<ul>\n<li>About the screen real estate issue:\n<ul>\n<li>You can hide the information bar and only show it when holding the <kbd class=\"kbd\">Super</kbd> key like <a href=\"https://user-images.githubusercontent.com/43980777/108533634-c57bee00-730b-11eb-9b18-f17b3ca91ce6.mp4\">this</a>.</li>\n<li>Or only show it when user switch workspace.</li>\n<li>Make a hot corner for mouse user...</li>\n</ul>\n</li>\n<li>Auto hide the information bar can give user a clean and focus desktop but for some this is inconvenient. All of these problems can be solved through the last method.</li>\n</ul>\n<h2 id=\"dynamic\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#dynamic\" aria-hidden=\"true\">#</a> Dynamic</h2>\n<p>Show window's title attach to the window itself but with a twist:</p>\n<ul>\n<li>In tabs workspace, the tab show additional information on the left and right side of the tabs bar make the tabs workspace look like one in the <em>Detach method</em>.</li>\n<li>In busy workspace, additional information will keep being display on the same position on a bar.\n<ul>\n<li>The bar can automatically be transparent like how <a href=\"https://elementary.io/\">Elementary OS</a>'s bar work.</li>\n<li>If the desktop have gaps equal or bigger than the bar, information bar can be blended into the gap-part.</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Busy workspace</th>\n<th>Tabs workspace</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809479-82579e80-75db-11eb-94de-e3f790ce07e4.png\" alt=\"loveBusy\" /></td>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809480-82f03500-75db-11eb-9302-94b3ab8c127b.png\" alt=\"loveTab\" /></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pro-3\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#pro-3\" aria-hidden=\"true\">#</a> Pro</h3>\n<ul>\n<li>This solved the information bar problem, additional information (workspaces and clock) will always be visible and still make the tabs workspace compact like the <em>Detach method</em>.</li>\n<li>In a busy workspace, &quot;if the desktop have gaps equal or bigger than the bar, information bar can be blended into the gap-part&quot; which make the busy workspace as compact as in the <em>Attach method</em>.</li>\n</ul>\n<h3 id=\"con-3\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#con-3\" aria-hidden=\"true\">#</a> Con</h3>\n<table>\n<thead>\n<tr>\n<th>Busy workspace</th>\n<th>Tabs workspace</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809476-81267180-75db-11eb-93d1-cb540b6fab66.png\" alt=\"hateBusy\" /></td>\n<td><img src=\"https://user-images.githubusercontent.com/43980777/108809478-81bf0800-75db-11eb-946a-6dd00a3b11fd.png\" alt=\"hateTab\" /></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>The title bar and information bar must be in the same direction to the window, if not (e.g: title bar attach to the top of the window but the information bar is on the bottom of the screen) the title will jump around when transition between busy workspace and tabs workspace. This will break the consistency of the desktop.</li>\n<li>If the desktop doesn't have gaps equal or bigger than the bar, the bar will be render fully in a busy workspace, and other than workspaces and clock, it display nothing... This bar took space on the desktop and used it inefficiency.</li>\n</ul>\n<h3 id=\"fix-3\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#fix-3\" aria-hidden=\"true\">#</a> Fix</h3>\n<ul>\n<li>Just use that empty space on the information bar to display more stuffs (<code>CPU</code>, <code>MEM</code>, <code>DISK</code>, <code>TEMP</code>, <code>PLAYING</code>...), then collapsed most of it to an arrow icon when switch to a tabs workspace.</li>\n</ul>\n<h2 id=\"conclusion\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/11/#conclusion\" aria-hidden=\"true\">#</a> Conclusion</h2>\n  <div class=\"overflow-x-auto whitespace-nowrap\">\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Busy workspace</th>\n<th>Tabs workspace</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Legacy</strong></td>\n<td>Cramped</td>\n<td>Cramped</td>\n</tr>\n<tr>\n<td><strong>Detach</strong></td>\n<td>Confuse</td>\n<td>Best</td>\n</tr>\n<tr>\n<td><strong>Attach</strong></td>\n<td>Good</td>\n<td>Okay</td>\n</tr>\n<tr>\n<td><strong>Dynamic</strong></td>\n<td>Good (best if have gaps)</td>\n<td>Best</td>\n</tr>\n</tbody>\n</table>\n  </div>\n",
      "date_published": "2023-08-09T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/10/",
      "url": "https://nnb.codeberg.page/blog/en/posts/10/",
      "title": "Kera Desktop",
      "content_html": "<p>In 2021, I wrote a wiki article on my dotfiles repo called: <a href=\"https://github.com/NNBnh/dotfiles/wiki/wm\">Windows manager Utopia</a>. TL;DR it's the idea of using a web browser as a windows Manager. In it, I explain its benefits and features and theory how it might work...</p>\n<h2 id=\"the-project\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/10/#the-project\" aria-hidden=\"true\">#</a> The project</h2>\n<p>Then one day I saw <a href=\"https://www.reddit.com/r/unixporn/comments/14591h2/kera_desktop_forget_it_i_just_made_my_own_desktop\">this post on r/unixporn</a>:</p>\n<blockquote>\n<p><strong>[Kera Desktop] Forget it, I just made my own desktop environment</strong></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/Ad1YsFW.webp\" alt=\"Kera Desktop\" /></p>\n<p><a href=\"https://desktop.kerahq.com/\">Kera Desktop</a> is an independence DE, not only that, it also based on web technology The more I read the website of the project, the more I see that it has many great features and ideas as I expected!</p>\n<p>I don't even have anything to add here because <a href=\"https://desktop.kerahq.com/\">the project's website</a> has already done a good job explaining it, I recommend everyone to visit their website right away!</p>\n<h2 id=\"performance-skeptical\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/10/#performance-skeptical\" aria-hidden=\"true\">#</a> Performance skeptical</h2>\n<p>Many people when they hear &quot;web-based&quot; immediately doubt the project's performance, don't know if it will run on the Thinkpad with 0.5gb ram... I recommend you take a look at the <a href=\"https://desktop.kerahq.com/faq\">project's FAQ</a>. I guarantee it will answer most of your skeptical.</p>\n",
      "date_published": "2023-08-09T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/9/",
      "url": "https://nnb.codeberg.page/blog/en/posts/9/",
      "title": "Image viewer/media player tối giản",
      "content_html": "<p>Here are my five stages of rice image viewer:</p>\n<h2 id=\"1-normie\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/9/#1-normie\" aria-hidden=\"true\">#</a> 1. Normie</h2>\n<p>These newbies have just installed Linux and use the default image viewer that comes with the DE. Since it already there, why not use it, right?</p>\n<h2 id=\"2-beginner\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/9/#2-beginner\" aria-hidden=\"true\">#</a> 2. Beginner</h2>\n<p>After installing Arch Linux (or Manjaro and pretending to use pure Arch) and setting up WM. The average r/unixporn enjoyer decided to install <a href=\"https://github.com/muennich/sxiv\">SXIV</a> after hearing that it was better than <a href=\"https://feh.finalrewind.org/\">FEH</a> from a Youtube video. But soon they realized that to configure SXIV, they had to edit the source code, and compile it themselves. Some continues to use it and adopts <a href=\"https://suckless.org/philosophy\">the Suckless philosophy</a>, others noticed the Suck**** inside of it and go on their journey to find a faster, lighter and easier to configure image viewer.</p>\n<h2 id=\"3-minimalist\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/9/#3-minimalist\" aria-hidden=\"true\">#</a> 3. Minimalist</h2>\n<p><a href=\"https://mpv.io/\">MPV</a> is a media player that is as powerful as VLC but extremely lightweight/minimal. It's also secretly a good image viewer, use <a href=\"https://github.com/occivink/mpv-image-viewer\">MPV Image Viewer</a> to turn MPV into a perfect image viewer.</p>\n<p>Of course if you only use MPV as then it's pretty bloat, but if you already used it as a media player then it's definitely lighter than having a dedicated image viewer (also who have an image viewer but not have a media player, right?). You can think of an image as a video, but it has no sound and only have one frame, so use the media player to view image still satisfies the UNIX philosophy &quot;Programs that do one thing and do it well&quot;.</p>\n<h2 id=\"4-extreme-minimalist\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/9/#4-extreme-minimalist\" aria-hidden=\"true\">#</a> 4. Extreme Minimalist</h2>\n<p>You can drag and drop media files into your web browser and it will play it. Realizing this, they quickly uninstall MPV and follow the path of suffering, path of extreme minimalism. There are a few formats it doesn't accept but it still be an acceptable solution... Or not, Using the browser can only view images in a very basic way, its experience is quite annoying. &quot;Have I gone too far?&quot;, &quot;Is this too minimalistic?&quot; they thought.</p>\n<h2 id=\"5-lazy\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/9/#5-lazy\" aria-hidden=\"true\">#</a> 5. Lazy</h2>\n<p>After rice Linux - minimalist style for a while, they start to get tired and have a different view of minimalism. They realize that using DE is very minimal in terms of time and effort. To be honest, DE is not that bloat, It has some features that although we don't always use, but having it is still very convenient in some situation. And if I don't install or configure anything but just use the default stuff from the DE, the dotfiles will be a lot more minimal!</p>\n<p>And so they decided to go back to installing DE and use the default image viewer that comes with the DE. Since it already there, why not use it, right?</p>\n<h2 id=\"honorable-mention\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/9/#honorable-mention\" aria-hidden=\"true\">#</a> 📢 Honorable Mention</h2>\n<p><a href=\"https://imageglass.org/\">Image Glass</a>: It's only run on Windows but it's is the best image viewer for Windows, it's well design with enough feature to even do some light modification but not too bloat.</p>\n",
      "date_published": "2023-08-07T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/8/",
      "url": "https://nnb.codeberg.page/blog/en/posts/8/",
      "title": "Nghĩa trang dự án",
      "content_html": "<p>List of projects I abandon. Some is finished, other left unfinished. But it's all pointless, or I don't feel it's useful to me anymore.</p>\n<h2 id=\"utilities\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#utilities\" aria-hidden=\"true\">#</a> Utilities</h2>\n<h3 id=\"superb-bootstrap\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#superb-bootstrap\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/superb-bootstrap\">Superb Bootstrap</a></h3>\n<ul>\n<li>Description: SuperB Bootstrap is a bootstrap-system/dotfiles-manager framework that can be installed with just one command on a new *NIX system installation. Its flagship feature it that it can pick and install packages from available package managers and can even install more package managers if necessary.</li>\n<li>Abandon reason: Although convenient, it's too unreliable. Also <a href=\"https://search.nixos.org/packages\">Nixpkgs</a>, <a href=\"https://brew.sh/\">Brew</a> and <a href=\"https://flatpak.org/\">Flatpak</a> exist. Even better: New distros like <a href=\"https://vanillaos.org/\">Vanilla OS</a> and <a href=\"https://blendos.co/\">Blend OS</a> can even allow you to install packages from multiple package managers from different distro.</li>\n</ul>\n<h3 id=\"coderun\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#coderun\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/coderun\">Coderun</a></h3>\n<ul>\n<li>Description: Code runner CLI that can run any languages. It recognizes the programming language from the file's extension and runs the file with the appropriate command.</li>\n<li>Abandon reason: You'd rather run the file by typing the appropriate command into the shell, which is more flexible and not much slower.</li>\n</ul>\n<h3 id=\"clipb-kak\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#clipb-kak\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/clipb.kak\">Clipb.kak</a></h3>\n<ul>\n<li>Description: Clipboard managers warper for Kakoune editor</li>\n<li>Abandon reason: Just install <a href=\"https://getclipboard.app/\">Clipboard</a> and add this to your <code>kakrc</code>:</li>\n</ul>\n<pre><code>hook -group 'clipboard' global WinCreate .* %{ evaluate-commands %sh{ printf '%s' 'set-register dquote %sh{ cb }' } }\nhook -group 'clipboard' global FocusIn   .* %{ evaluate-commands %sh{ printf '%s' 'set-register dquote %sh{ cb }' } }\nhook -group 'clipboard' global RegisterModified \\&quot; %{ nop %sh{ printf '%s' &quot;$clipboard&quot; | cb &amp; } }\n</code></pre>\n<h3 id=\"superb-mk\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#superb-mk\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/mk\">SuperB MK</a></h3>\n<ul>\n<li>Description: Its a files and folders creation tool inspired by <a href=\"https://github.com/tanrax/terminal-AdvancedNewFile\"><strong>Advanced New File</strong></a>.</li>\n<li>Abandon reason: I rarely find myself needing to create multiple folders and files with complex structure. If I need a template, I just init it's using a proper tool, or copy a template from some repo. Also, you can setup your text editor so that it automatically create parent directories if a file is opened on a path that does not exist (e.g: <code>mkparents</code> options in Micro editor).</li>\n</ul>\n<h3 id=\"superb-hr\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#superb-hr\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/hr\">SuperB HR</a></h3>\n<ul>\n<li>Description: Horizontal ruler for terminal.</li>\n<li>Abandon reason: This more of a shitpost than anything. Just put this into your shell config:</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">hr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">text</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">${@<span class=\"token operator\">:-</span>─}</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span><br />    <span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'\\033[?7l%*s\\033[?7h'</span> <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token environment constant\">COLUMNS</span><span class=\"token operator\">:-</span>$(tput cols)}</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"s/ /<span class=\"token variable\">$text</span>/g\"</span><br />  <span class=\"token keyword\">done</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"my-sed-script-collections\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#my-sed-script-collections\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/sed-collections\">My Sed script collections</a></h3>\n<ul>\n<li>Description: This is a collection of Sed scripts to help you filter text.</li>\n<li>Abandon reason: I never actually used it, I just made it for fun...</li>\n</ul>\n<h2 id=\"rice\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#rice\" aria-hidden=\"true\">#</a> Rice</h2>\n<h3 id=\"superb-st\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#superb-st\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/superb-st\">SuperB ST</a></h3>\n<ul>\n<li>Description: ST-base terminal with enough patches.</li>\n<li>Abandon reason: Even though it's fast and minimalist, it's quite janky and maintaining / building the binary myself is quite exhausting to me.</li>\n</ul>\n<h3 id=\"superb-ui\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#superb-ui\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/superb-ui\">SuperB UI</a></h3>\n<ul>\n<li>Description: It's a UI and colors management method that export the colors hex through environment variables so any program that can read environment variables can use it.</li>\n<li>Abandon reason: That's a bad idea... Environment variables are very slow, unstable, some applications/cases hard to read it. Use <a href=\"https://github.com/tinted-theming\">Tinted Theming</a>, <a href=\"https://github.com/deviantfero/wpgtk\">Wpgtk</a> or <a href=\"https://github.com/dylanaraps/pywal\">Pywal</a> instead.</li>\n</ul>\n<h3 id=\"diyship\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#diyship\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/info-mono/diyship\">DIYship</a></h3>\n<ul>\n<li>Description: DIYship is a cross-shell prompt framework that let you write your prompt with any programing language for any shell.</li>\n<li>Abandon reason: Except for creating a prompt that competes with <a href=\"https://starship.rs/\">Starship</a>, no souls need DIYship...</li>\n</ul>\n<h3 id=\"bmono\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#bmono\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/bmono\">Bmono</a></h3>\n<ul>\n<li>Description: My goal is to make a Iosevka font that fix the <a href=\"https://github.com/be5invis/Iosevka/issues/1326\">ligatures on Kitty bug</a> and come with some tiny tweak to make it slicker.</li>\n<li>Abandon reason: Now the <a href=\"https://github.com/be5invis/Iosevka/pull/1403\">Kitty bug had been fixed</a>, and you can tweak the font by using <a href=\"https://github.com/be5invis/Iosevka/issues/1376\">stylistic sets/character variants</a>, I no longer see the point of creating and maintaining a separate font.</li>\n</ul>\n<h3 id=\"da-one\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#da-one\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/da-one\">Da One</a></h3>\n<ul>\n<li>Description: A color scheme that vibrant and distinct but still maintain a pleasant harmony. It's design to work with terminal, meaning all accents tone have normal and bright colors.</li>\n<li>Abandon reason: <a href=\"https://github.com/catppuccin/catppuccin\">Catppuccin</a> exist and it did exactly that but better. I saw Catppuccin when I was making Da One, I could just stop right away but I think I could make a better color scheme than Catppuccin (nope).</li>\n</ul>\n<h2 id=\"other\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#other\" aria-hidden=\"true\">#</a> Other</h2>\n<h3 id=\"orange-markup-language\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/8/#orange-markup-language\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/NNBnh/orml\">Orange markup language</a></h3>\n<ul>\n<li>Description: Orange markup language is an &quot;original&quot; markup language inspired by <a href=\"https://pml-lang.dev/\">PML</a>, design to replace both Markdown and HTML.</li>\n<li>Abandon reason: After a while I start to realize that maybe we don't need another markdown language anymore:\n<ul>\n<li>For developer, HTML is the best choice because HTML's tags syntax is very clear.</li>\n<li>For causal writing usage, Markdown and AsciiDoc is good enough.</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2023-08-06T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/7/",
      "url": "https://nnb.codeberg.page/blog/en/posts/7/",
      "title": "Ruby và Tôi",
      "content_html": "<p>Around February, after I posted <a href=\"https://codeberg.org/NNB/dotfiles/releases/tag/v3.5.0\">rice v3.5.0</a>, I promised to make a blog to explain how I use Ruby as a shell. Initially I want to explain it on an article, then it expanded into a website! Then a mountain of college work and internship job drop into my schedule... After all of that, I finally have time and energy to blogging again. So sorry and thank you everyone for waiting to follow my blog, I will try blogging more frequently!</p>\n<p>Back to Ruby. As mentioned, the website that I created is <a href=\"https://nnb.codeberg.page/ruby-on-shell\">Ruby on Shell</a> and you can read it right now. This blog post will focus on how I discovered the power of Ruby and the process by which I created Ruby on Shell.</p>\n<h2 id=\"how-i-get-to-know-ruby\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/7/#how-i-get-to-know-ruby\" aria-hidden=\"true\">#</a> How I get to know Ruby</h2>\n<p>I was a naive programmer back then, thinking that I should just master one programming language and use it for everything (and that language was Python, a very normie choice...). I used <a href=\"https://xon.sh/\">Xonsh</a> (in short, it is a fusion between Python and Bash) as my main shell for a while, its interactive experience is quite good but scripting on Xonsh is a bit annoying. Because of Python's off-side rule and list comprehension, it's hard for me to scripting as short as I'd like.</p>\n<p>I want a full-fledged programming language like Python, Perl or Lua but with good scripting features like <a href=\"https://www.nushell.sh/\">Nushell</a> or <a href=\"https://elv.sh/\">Elvish</a>.</p>\n<p>Then one day I saw this line on <a href=\"http://xahlee.info/comp/list_comprehension.html\">an article by Xah Lee about list comprehension</a>:</p>\n<blockquote>\n<pre class=\"language-rb\"><code class=\"language-rb\"><span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token number\">.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>n<span class=\"token operator\">|</span> n<span class=\"token punctuation\">.</span>even<span class=\"token operator\">?</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>n<span class=\"token operator\">|</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">}</span></code></pre>\n<p>Note that this is not list comprehension, because it does not use a special syntax. But it captures the <code>map(f, filter(list,predicate))</code> in ruby style.</p>\n</blockquote>\n<p>I've seen Xah Lee mention Ruby a few times, but that's the first time I've read a Ruby code and understand what it does. Its syntax is very compact, I feel that I can script on this language easily. And I was correct, I've dived into <a href=\"https://nnb.codeberg.page/ruby-on-shell/#why-ruby\">why Ruby is a perfect choice for shell scripting in Ruby on Shell</a> so I won't repeat it again.</p>\n<p>Here are my few thoughts on Ruby before moving on to the next section:</p>\n<ul>\n<li>I have been peeking at Lua for a while now, I even found a shell similar to Xonsh but using Lua as the core (<a href=\"https://rosettea.github.io/Hilbish\">Hilbish</a>). But I don't really like Lua because even though it's fast, light, and simple... Its Syntax is still quite verbose and isn't easy to chain functions from left to right like Ruby or other shells.</li>\n<li>Currently, there is no language to easily run both Ruby and shell commands, so here is how I use Ruby in the terminal:\n<ul>\n<li>Use a POSIX shell as the main shell, and create a keybind in the shell to switch to Ruby for scripting.</li>\n<li>In Ruby there is a syntax to call shell commands easily (wrap the command with backticks) so just enjoy shell scripting.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ruby-on-shell-how-it-s-made\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/7/#ruby-on-shell-how-it-s-made\" aria-hidden=\"true\">#</a> Ruby on Shell - How It's Made</h2>\n<p>Not difficult but very time consuming:</p>\n<ol>\n<li><strong>Make a list of standard CLI tools:</strong> I found it from the POSIX documentation, the list of tools in Toybox, and a few other sources. Then put it all together and go through the list to see what should and shouldn't be on the list.</li>\n<li><strong>Find the alternative in Ruby:</strong> Again go through everything on the list, find a similar function or library in Ruby and document it. Most of the time, I just need to add a link to an API, but some have to write a more detail instructions.</li>\n<li><strong>Build a proper website:</strong> Although this is the <em>hardest</em> part of the project, it only took me less than a week to finish the frontend... And about two weeks to writing the introduction.</li>\n</ol>\n<p>It was hard work, but it was worth it in the end. The process helped me increase my understanding of Ruby, plus now I have a pretty useful cheat-sheet.</p>\n<h2 id=\"the-future\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/7/#the-future\" aria-hidden=\"true\">#</a> The Future</h2>\n<p>I'm currently working on a project called <a href=\"https://codeberg.org/NNB/shell-on-ruby\">Shell on Ruby</a> to make scripting and using shell commands on Ruby more convenient.</p>\n<p>I'm also occasionally peeking <a href=\"https://crystal-lang.org/\">Crystal</a>, its syntax is ~90% similar to Ruby but faster and has some better design than Ruby, but scripting on it isn't as convenient.</p>\n<p>And that's all, I will continue my adventure on making a perfect scripting environment. See you in the next blogs.</p>\n",
      "date_published": "2023-08-06T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/6/",
      "url": "https://nnb.codeberg.page/blog/en/posts/6/",
      "title": "Mở tab hay tải app?",
      "content_html": "<p>If you want to access a platform like YouTube, Facebook, Discord, Messenger... and it requires an internet connection to access it, 95% of you don't need to download its app, just use it directly through the browser. Whether on a desktop or a mobile.</p>\n<h2 id=\"why-not-apps\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/6/#why-not-apps\" aria-hidden=\"true\">#</a> Why not apps?</h2>\n<ol>\n<li>It's bloat.</li>\n<li>App will have more access to user's personal data.</li>\n<li>You cannot open multiple tabs at the same time.</li>\n</ol>\n<h2 id=\"it-s-browser-tabs-good-enough\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/6/#it-s-browser-tabs-good-enough\" aria-hidden=\"true\">#</a> It's browser tabs good enough?</h2>\n<p>Yes, very good, in fact!</p>\n<h3 id=\"on-desktop\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/6/#on-desktop\" aria-hidden=\"true\">#</a> On Desktop</h3>\n<p>Most of us have been using web browsers to surf social media sites on the desktop. However, the same cannot be said for communication apps like Discord and Messenger. With these applications, people tend to download its own app because they think that they have to do so to use features such as notifications, toggle the mic when voice-call. But do you know that you can get these features even when using it on the web:</p>\n<ul>\n<li>All popular chat applications have a feature to show notifications on the web, but some (like Discord) don't show notifications by default, you just need to go to settings and enable it.</li>\n<li>Speaking of Discord, you can also toggle the mic with keyboard shortcuts like you use on Discord without downloading it: (<a href=\"https://superuser.com/questions/55598/super-key-to-pause-mute-mic-and-mute-speakers-in-windows\">Guide for setting up mic shortcuts on Windows with AutoHotKey</a>, <a href=\"https://askubuntu.com/questions/12100/command-to-mute-and-unmute-a-microphone\">Guide for doing the same on Linux</a>). That way you can toggle the mic when used with any app, for the whole system.</li>\n</ul>\n<h3 id=\"on-mobile\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/6/#on-mobile\" aria-hidden=\"true\">#</a> On mobile</h3>\n<p>Before 2014, most social medias website is unusable on mobile web browsers, often too laggy, and the interface are terrible compared to the apps. But over time, phones are now much faster now and websites have also significantly improved on browsers. Now day, accessing these platforms on a browser is even better than using apps:</p>\n<ul>\n<li>If you use Brave or Firefox with <a href=\"https://ublockorigin.com/\">uBlock Origin</a>, you have ad-blocker!</li>\n<li>You can leave YouTube playing on background.</li>\n<li>Opening links to other websites is more convenient than switching back and forth between the app and the browser.</li>\n<li>You can bookmark any websites and use a unified bookmark manager instead of using the save feature to save posts scattered in each social medias.</li>\n</ul>\n",
      "date_published": "2023-02-13T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/5/",
      "url": "https://nnb.codeberg.page/blog/en/posts/5/",
      "title": "Window manager tối giản",
      "content_html": "<p>This is a follow-up to <a href=\"https://nnb.codeberg.page/blog/en/posts/4\">&quot;Things to note when design a minimal CLI utility&quot;</a>, but this time it's about window manager.</p>\n<p><img src=\"https://user-images.githubusercontent.com/43980777/134518773-1862d6a4-3dea-4af7-a3aa-71cc79b91c71.png\" alt=\"Pixel Art\" /></p>\n<h2 id=\"configuration\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/5/#configuration\" aria-hidden=\"true\">#</a> Configuration</h2>\n<p>I have covered this in detail on <a href=\"https://nnb.codeberg.page/blog/en/posts/4\">my previous blog</a>, it just also applies to WM.</p>\n<h2 id=\"widgets\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/5/#widgets\" aria-hidden=\"true\">#</a> Widgets</h2>\n<p>Widgets like bar, menu don't need and shouldn't be built-in to the windows manager. Because there is already tools out there that handle these widgets far better\n(<a href=\"https://github.com/elkowar/eww\">EWW</a>, <a href=\"https://github.com/brndnmtthws/conky\">Conky</a>, <a href=\"https://wiki.archlinux.org/title/List_of_applications#Taskbars\">bars</a>, <a href=\"https://wiki.archlinux.org/title/List_of_applications#Application_launchers\">menus</a>).\nThe exception is if the WM has a whole widget's system like <a href=\"https://awesomewm.org/\">AwesomeWM</a> that can be used to config everything from wallpaper to window decorations.</p>\n<h2 id=\"wallpaper\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/5/#wallpaper\" aria-hidden=\"true\">#</a> Wallpaper</h2>\n<p>WM should not <em>go out of it's way</em> to handle wallpaper, leave it to the <a href=\"https://wiki.archlinux.org/title/List_of_applications/Other#Wallpaper_setters\">wallpaper setters</a>.</p>\n<h2 id=\"hotkeys\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/5/#hotkeys\" aria-hidden=\"true\">#</a> Hotkeys</h2>\n<p>The same go for hotkey, hotkey daemons exist!\n(<a href=\"https://github.com/baskerville/sxhkd\">SXHKD</a>, <a href=\"https://github.com/jtroo/kanata\">Kanata</a>, <a href=\"https://github.com/kmonad/kmonad\">KMonad</a>).\nThe only exception are to config mouse buttons (with mod keys) to focus, move and resize windows.</p>\n",
      "date_published": "2023-02-11T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/4/",
      "url": "https://nnb.codeberg.page/blog/en/posts/4/",
      "title": "Nhưng lưu ý khi thiết kế một công cụ CLI tối giản",
      "content_html": "<p><a href=\"https://wikipedia.org/wiki/Unix_philosophy\">The UNIX philosophy</a> is emphasized when it comes to designing CLI tools because it helps to tie together disparate tools into a unified TTY ecosystem. Each tool just <em>&quot;Do one thing and do it well&quot;</em>, which makes it possible for all tools to be harmoniously connected with each other. However, I still see many old and new CLI tools that have some redundant features. These features are included with the intention of making the tool more convenient to use, but users can already achieve it by piping to existed tools relatively convenient. Redundant features in a CLI tool only make the tool more cumbersome.</p>\n<h2 id=\"redirection\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/4/#redirection\" aria-hidden=\"true\">#</a> Redirection</h2>\n<p>If your tool works with strings and not specifically with files, it doesn't need flags to read files like <code>-f</code>, <code>--file</code>, <code>-i</code>, <code>--input</code>... Because it's unnecessary and makes your tool a bit more complicated. You should instead allow your tool to read <code>stdin</code>, this syntax can be used uniformly across tools and most shells have support for redirecting data from a file into tool:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">tool <span class=\"token operator\">&lt;</span> input.txt<br /><span class=\"token function\">cat</span> input.txt <span class=\"token operator\">|</span> tool<br /><span class=\"token function\">cat</span> input1.txt input2.txt <span class=\"token operator\">|</span> tool</code></pre>\n<p>Similar to reading files, most shells have support for redirecting output to files:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">tool <span class=\"token operator\">></span> output.txt<br />tool <span class=\"token operator\">>></span> output.txt<br />tool <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output1.txt output2.txt<br />tool <span class=\"token operator\">&lt;</span> input.txt <span class=\"token operator\">>></span> output.txt</code></pre>\n<h2 id=\"clipboard\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/4/#clipboard\" aria-hidden=\"true\">#</a> Clipboard</h2>\n<p>Your CLI tool should not have the features to get or set to the clipboard because people will use your tool in all kinds of environments, and you can't support every clipboard manager out there. But if users want your tool to interact with the clipboard, they'll be more likely to pipe it to the clipboard manager they're using:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">cb <span class=\"token operator\">|</span> tool<br />tool <span class=\"token operator\">|</span> cb</code></pre>\n<h2 id=\"configuration\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/4/#configuration\" aria-hidden=\"true\">#</a> Configuration</h2>\n<p>Don't invent a new format or new language just to config your tool:</p>\n<ul>\n<li>If the config file only stores values, use JSON, TOML, YAML or even <a href=\"https://kdl.dev/\">KDL</a>. INI is fine, but it has some limitations and is not implement consistently. Using a common format is of course better for both developers and users. Dotfiles management tools like Home Manager can also work with these formats easier.</li>\n<li>If it needs scripting, create a CLI interface so any language can call it. Or create a library / API for Lua, Python, Ruby... Don't create a dedicate programming language just to config your tool because that language will most likely limited, janky and just never be as good or as flexible as some proper languages.</li>\n</ul>\n<h2 id=\"colored-outputs\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/4/#colored-outputs\" aria-hidden=\"true\">#</a> Colored outputs</h2>\n<p>If your tool supports color rendering, please use <a href=\"https://wikipedia.org/wiki/ANSI_escape_code\">3-bit and 4-bit color</a> as the default! I know TTY's default color isn't pleasant, but most terminal users use themes, and when they use themes they want all programs to display with the colors in the theme, not a bunch of random colors. A lot of CLI tools out there that don't follow this and choose to use Monokai, Gruvbox or their own (often really odd) colors!</p>\n<h2 id=\"further-readings\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/4/#further-readings\" aria-hidden=\"true\">#</a> Further readings</h2>\n<p>I highly recommend everyone to read <a href=\"https://clig.dev/\">Command Line Interface Guidelines</a>, the article is not only have a guide but also gives philosophy when designing CLI.</p>\n",
      "date_published": "2023-02-02T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/3/",
      "url": "https://nnb.codeberg.page/blog/en/posts/3/",
      "title": "Chọn trình duyệt web",
      "content_html": "<h2 id=\"it-s-time-to-ditch-chrome\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/3/#it-s-time-to-ditch-chrome\" aria-hidden=\"true\">#</a> It's time to ditch Chrome</h2>\n<p>Chrome is currently the most popular browser, but that doesn't mean it's the best. It used to be the best, but now there are many of other browsers that are better in every way, from features to security (Chrome collects a lot of user data!).</p>\n<p>If you are using Windows, using Edge is better than Chrome because Edge is also a Chromium-based browser, and it comes pre-installed anyway. Although, I wouldn't recommend using Edge because there are so many better options like:</p>\n<h2 id=\"firefox\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/3/#firefox\" aria-hidden=\"true\">#</a> <a href=\"https://www.mozilla.org/firefox/new\">Firefox</a></h2>\n<p><img src=\"https://i.imgur.com/8HtSanJ.webp\" alt=\"Firefox\" /></p>\n<p><a href=\"https://www.privacyguides.org/desktop-browsers/#firefox\">Firefox is the best privacy and security desktop browser</a> <a href=\"https://www.privacyguides.org/desktop-browsers/#recommended-configuration\">(but you can harden it more)</a>. Not only that, it also has the best <a href=\"https://youtu.be/a-V8GFtwjos\">dev-tools</a>, anyone who does web-dev should also use Firefox.</p>\n<p>Firefox is also the best in terms of customization:</p>\n<ul>\n<li>Unlike most Chromium-based browsers, Firefox allows you to change the position of toolbar buttons.</li>\n<li>You can easily create themes with <a href=\"https://color.firefox.com/\">Firefox Color</a>.</li>\n<li>If you want to change more advanced stuff, you can <a href=\"https://www.reddit.com/r/firefox/wiki/userchrome\">customize Firefox with CSS</a>.</li>\n<li>Or use one of <a href=\"https://github.com/topics/userchrome\">the beautiful themes developed by the community</a>.</li>\n</ul>\n<a href=\"https://github.com/akshat46/FlyingFox\">\n  <figure>\n    <img class=\"w-full\" src=\"https://raw.githubusercontent.com/akshat46/FlyingFox/master/img/demo-hover.gif\" alt=\"FlyingFox\" />\n    <figcaption class=\"text-center\">FlyingFox</figcaption>\n  </figure>\n</a>\n<a href=\"https://github.com/Etesam913/slick-fox\">\n  <figure>\n    <img class=\"w-full\" src=\"https://i.imgur.com/h4DxrhC.gif\" alt=\"Slick-Fox\" />\n    <figcaption class=\"text-center\">Slick-Fox</figcaption>\n  </figure>\n</a>\n<h2 id=\"some-chromium-based-alternatives\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/3/#some-chromium-based-alternatives\" aria-hidden=\"true\">#</a> Some Chromium-based alternatives</h2>\n<p>Firefox is the best in many ways, but it's not a Chromium-based browser. This can be seen as a good thing because it breaks the monopoly that Chrome and Google hold in the web browser market. But some still need to use Chromium-based browser for a variety of reasons.</p>\n<h3 id=\"brave\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/3/#brave\" aria-hidden=\"true\">#</a> <a href=\"https://brave.com/\">Brave</a></h3>\n<p><img src=\"https://i.imgur.com/ba0rBQ6.webp\" alt=\"Firefox\" /></p>\n<p>Brave is <a href=\"https://www.privacyguides.org/desktop-browsers/#brave\">second in terms of privacy and security</a>, but its default setting is the most secure (it has a built-in ad-blocker), which is great for those who want security without the hassle of setting up.</p>\n<p>Unlike Firefox on mobile, Brave on mobile is also very secure, using the same browser on all platforms is also very convenient for data synchronization, open tabs, etc.</p>\n<h3 id=\"vivaldi\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/3/#vivaldi\" aria-hidden=\"true\">#</a> <a href=\"https://vivaldi.com/\">Vivaldi</a></h3>\n<p><img src=\"https://i.imgur.com/Qs9lalF.webp\" alt=\"Vivaldi\" /></p>\n<p>Although it's not very private and secure, Vivaldi is the most feature-rich browser (kitchen-sink included!). It has calendar, email, contacts, split screen feature... Vivaldi is also very easy to customize, although it is not as advanced as Firefox CSS, it has a lot of customizations available out of the box.</p>\n<p>At first, I quite liked it. But later on, I found it cumbersome. And although it is pretty customizable, I still do not find it as satisfying as to customize Firefox.</p>\n",
      "date_published": "2023-01-30T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/2/",
      "url": "https://nnb.codeberg.page/blog/en/posts/2/",
      "title": "Trở thành Hackerman",
      "content_html": "<p>As a programmer, you need to master a lot of skills, one of which is to look cool. Here are some TTY tools that can help turn you into a <em>Hackerman</em>.</p>\n<h2 id=\"cool-retro-term\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#cool-retro-term\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/Swordfish90/cool-retro-term\">Cool Retro Term</a></h2>\n<blockquote>\n<p>cool-retro-term is a terminal emulator which mimics the look and feel of the old cathode tube screens. It has been designed to be eye-candy, customizable, and reasonably lightweight.</p>\n</blockquote>\n<div class=\"sm:hidden\">\n<p><img src=\"https://user-images.githubusercontent.com/121322/32070717-16708784-ba42-11e7-8572-a8fcc10d7f7d.gif\" alt=\"Default Amber Cool Retro Term\" />\n<img src=\"https://user-images.githubusercontent.com/121322/32070715-163a1c94-ba42-11e7-80bb-41fbf10fc634.gif\" alt=\"Default Green Cool Retro &gt; Term\" /></p>\n</div>\n<div class=\"hidden sm:block\">\n<table>\n<thead>\n<tr>\n<th>&gt; Default Amber</th>\n<th>$ Default Green</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://user-images.githubusercontent.com/121322/32070717-16708784-ba42-11e7-8572-a8fcc10d7f7d.gif\" alt=\"Default Amber Cool Retro Term\" /></td>\n<td><img src=\"https://user-images.githubusercontent.com/121322/32070715-163a1c94-ba42-11e7-80bb-41fbf10fc634.gif\" alt=\"Default Green Cool Retro &gt; Term\" /></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"edex-ui\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#edex-ui\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/GitSquared/edex-ui\">eDEX-UI</a></h2>\n<blockquote>\n<p>A cross-platform, customizable science fiction terminal emulator with advanced monitoring &amp; touchscreen support.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/GitSquared/edex-ui/master/media/screenshot_default.png\" alt=\"eDEX-UI\" /></p>\n<h2 id=\"tdfgo\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#tdfgo\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/digitallyserviced/tdfgo\">Tdfgo</a></h2>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/TheDraw\">TheDraw</a> font parser and console text renderer.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/digitallyserviced/tdfgo/main/assets/tdfgocast.gif\" alt=\"Tdfgocast\" />\n<img src=\"https://raw.githubusercontent.com/digitallyserviced/tdfgo/main/assets/tdfgo-print-user.png\" alt=\"Tdfgo print user\" /></p>\n<p>Some alternative:\n<a href=\"http://www.figlet.org/\">FIGlet</a>, <a href=\"http://caca.zoy.org/wiki/toilet\">TOIlet</a>\nwith\n<a href=\"https://github.com/xero/figlet-fonts\">Xero's fonts collection</a>.</p>\n<h2 id=\"btop\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#btop\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/aristocratos/btop\">Btop</a></h2>\n<blockquote>\n<p>Resource monitor that shows usage and stats for processor, memory, disks, network and processes.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/eDvgKsI.webp\" alt=\"Btop\" /></p>\n<h2 id=\"unimatrix\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#unimatrix\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/will8211/unimatrix\">Unimatrix</a></h2>\n<blockquote>\n<p>Python script to simulate the display from &quot;The Matrix&quot; in terminal.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/BHeqwCQ.webp\" alt=\"Unimatrix\" /></p>\n<p>Some alternative:\n<a href=\"https://github.com/abishekvashok/cmatrix\">Cmatrix</a>, <a href=\"https://github.com/st3w/neo\">Neo</a>.</p>\n<h2 id=\"no-more-secrets\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#no-more-secrets\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/bartobri/no-more-secrets\">No more secrets</a></h2>\n<blockquote>\n<p>This project provides a command line tool called <code>nms</code> that recreates the famous data decryption effect seen on screen in the 1992 hacker movie Sneakers. For reference, you can see this effect at 0:35 in <a href=\"https://youtu.be/F5bAa6gFvLs?t=35\">this movie clip</a>.</p>\n</blockquote>\n<p><img src=\"https://www.brianbarto.info/static/nms/nms.gif\" alt=\"Screenshot\" /></p>\n<blockquote>\n<p>Also included in this project is a program called <code>sneakers</code> that recreates what we see in the above movie clip.</p>\n</blockquote>\n<p><img src=\"https://www.brianbarto.info/static/nms/sneakers.gif\" alt=\"Screenshot\" /></p>\n<h2 id=\"genact\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#genact\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/svenstaro/genact\">Genact</a></h2>\n<blockquote>\n<p>Pretend to be busy or waiting for your computer when you should actually be doing real work! Impress people with your insane multitasking skills. Just open a few instances of <code>genact</code> and watch the show. <code>genact</code> has multiple scenes that pretend to be doing something exciting or useful when in reality nothing is happening at all.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/svenstaro/genact/master/gifs/cc.gif\" alt=\"CC\" />\n<img src=\"https://raw.githubusercontent.com/svenstaro/genact/master/gifs/memdump.gif\" alt=\"Memdump\" />\n<img src=\"https://raw.githubusercontent.com/svenstaro/genact/master/gifs/cargo.gif\" alt=\"Cargo\" /></p>\n<h2 id=\"awesome-console-services\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#awesome-console-services\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/chubin/awesome-console-services\">Awesome console services</a></h2>\n<blockquote>\n<p>A curated list of awesome console services (reachable via HTTP, HTTPS and other network protocols).</p>\n</blockquote>\n<p>Notables are:</p>\n<h3 id=\"mapscii\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#mapscii\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/rastapasta/mapscii\">MapSCII</a></h3>\n<blockquote>\n<p>MapSCII is a Braille &amp; ASCII world map renderer for your console.</p>\n</blockquote>\n<script id=\"asciicast-117813\" src=\"https://asciinema.org/a/117813.js\" async=\"\"></script>\n<p>Try it out:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">telnet mapscii.me</code></pre>\n<h3 id=\"rickrollrc\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/2/#rickrollrc\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/keroserene/rickrollrc\">Rickrollrc</a></h3>\n<blockquote>\n<p>Bash script which <a href=\"http://en.wikipedia.org/wiki/Rickrolling\">rickrolls</a> your terminal by playing Rick Astley’s “Never Gonna Give You Up”.</p>\n</blockquote>\n<p><img src=\"http://i.imgur.com/yDLaZna.png\" alt=\"rickroll in mac\" /></p>\n<p>To start rickrollin’ immediately:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-sL</span> https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span></code></pre>\n<p>Here is the clandestine command you can give to your friends 😈:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-sL</span> http://bit.ly/10hA8iC <span class=\"token operator\">|</span> <span class=\"token function\">bash</span></code></pre>\n",
      "date_published": "2023-01-24T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/1/",
      "url": "https://nnb.codeberg.page/blog/en/posts/1/",
      "title": "Setting từ TTY",
      "content_html": "<p>This is just a small list of guides on system configuration from the command line instead of the bloated config app that come with the desktop environment.</p>\n<h2 id=\"system\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/1/#system\" aria-hidden=\"true\">#</a> 🖥️ System</h2>\n<ul>\n<li><a href=\"https://wiki.archlinux.org/title/Users_and_groups\">Users</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/System_time\">Time</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Locale\">Locale</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Power_management\">Power</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Partitioning\">Partition</a></li>\n</ul>\n<h2 id=\"connect\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/1/#connect\" aria-hidden=\"true\">#</a> 📶 Connect</h2>\n<ul>\n<li><a href=\"https://wiki.archlinux.org/title/NetworkManager\">Wifi</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Network_configuration\">Network</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Bluetooth\">Bluetooth</a></li>\n</ul>\n<h2 id=\"devices\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/1/#devices\" aria-hidden=\"true\">#</a> 🖱️ Devices</h2>\n<ul>\n<li><a href=\"https://cheat.sh/pactl\">Sound</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Category:Keyboard_configuration\">Keyboard</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Category:Mice\">Mouse</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Touchpad_Synaptics\">Touchpad</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Wacom_tablet\">Tablet</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Touchscreen\">Touchscreen</a></li>\n<li><a href=\"https://wiki.archlinux.org/title/Xrandr\">Display</a> (<a href=\"https://sr.ht/~emersion/wlr-randr\">for Wayland</a>)</li>\n</ul>\n",
      "date_published": "2023-01-23T00:00:00Z"
    }
    ,
    {
      "id": "https://nnb.codeberg.page/blog/en/posts/0/",
      "url": "https://nnb.codeberg.page/blog/en/posts/0/",
      "title": "Blog post &quot;đầu tiên&quot;!",
      "content_html": "<h2 id=\"hello-world\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/0/#hello-world\" aria-hidden=\"true\">#</a> Hello, World!</h2>\n<p>Welcome to my blog! This isn't really my first time blogging, I've written some articles on my <a href=\"https://github.com/NNBnh/dotfiles/wiki\">Đotfiles</a>'s wiki before, but NNBlog is a fresh start. In the coming month, I will copy most articles from the Dotfiles to this site.</p>\n<h2 id=\"the-technical\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/0/#the-technical\" aria-hidden=\"true\">#</a> The technical</h2>\n<p>Before that, I wanted to show off a little bit about the technical side of this site. This is a static website generated using <a href=\"https://www.11ty.dev/\">11ty (Eleventy)</a>. 11ty is a light, simple and convenient JS framework. Its most important feature is that it allows the us to write the page in <a href=\"https://wikipedia.org/wiki/Markdown\">Markdown</a>. Not only that, it also has many features such as creating a table of contents, tag manager... This is quite ideal for a tinker like me.</p>\n<p>I also use <a href=\"https://daisyui.com/\">DaisyUI</a> for styling and <a href=\"https://alpinejs.dev/\">Alpine.js</a> for a bit of interactive. Although, Alpine.js is a bit overkill at the moment (the only thing that needs it is an image hover effect on the homepage):</p>\n<p><img src=\"https://i.imgur.com/KZ93WrH.webp\" alt=\"Hover effect\" /></p>\n<p>But in the future I can give a small interactive parts in some articles.</p>\n<h2 id=\"support-multi-language\" tabindex=\"-1\"><a class=\"link-mono\" href=\"https://nnb.codeberg.page/blog/en/posts/0/#support-multi-language\" aria-hidden=\"true\">#</a> Support multi-language</h2>\n<p>Before, I only wrote in English because I wrote it on Github Wiki. But as you can see in the right corner of the Navbar there is a button to change to Vietnamese, I had blog in both English and Vietnamese! From now on, I will write in my native language first, then translate it to English. I'm quite confident about my English listening/reading skill, but I'm still a writing newbie, so <a href=\"https://languagetool.org/\">LanguageTool</a> (an open source grammar checker) has become an indispensable tool for me.</p>\n<p>The common way to support multi-language in 11ty is to split it into two directories <code>en/</code> and <code>vi/</code>, the same post has separate files of each language on each directory. That method is fine, but I want more flexibility in managing and reusing the elements of the article. So I let 11ty paginate each Markdown file into two pages in English (with <code>lang = 'en'</code>) and Vietnamese (with <code>lang = 'vi'</code>) so I can write in a single file like this:</p>\n<pre class=\"language-liquid\"><code class=\"language-liquid\">---<br />title:<br />  en: \"*First post!\"<br />  vi: Blog post \"đầu tiên\"!<br />description:<br />  en: Made with 11ty<br />  vi: Khai bút đầu năm bằng 11ty<br />tags:<br />  - update<br />  - web_dev<br />date: 2023-01-22<br />image: https://images.unsplash.com/photo-1674240660273-a3496c4604fd<br />---<br /><br /><span class=\"token liquid language-liquid\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token keyword\">if</span> lang <span class=\"token operator\">==</span> <span class=\"token string\">'vi'</span> <span class=\"token delimiter punctuation\">%}</span></span><br />  Xin chào!<br /><span class=\"token liquid language-liquid\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token keyword\">else</span> <span class=\"token delimiter punctuation\">%}</span></span><br />  Hello!<br /><span class=\"token liquid language-liquid\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token keyword\">endif</span> <span class=\"token delimiter punctuation\">%}</span></span></code></pre>\n<p>That's all folks, I hope you all look forward to reading my next blog posts, bye!</p>\n",
      "date_published": "2023-01-22T00:00:00Z"
    }
    
  ]
}
